using Leopotam.EcsLite;
using Leopotam.EcsLite.Di;
using System.Collections.Generic;
using UnityEngine;

namespace Client {
    sealed class InvulnerabilitySystem : MainEcsSystem
    {
        readonly EcsFilterInject<Inc<Invulnerable>> _filter;
        readonly EcsPoolInject<Invulnerable> _invulPool;
        private List<int> indexes = new List<int>();

        public override MainEcsSystem Clone()
        {
            return new InvulnerabilitySystem();
        }

        public override void Run (IEcsSystems systems) {
            //sorry pacany don't know hot wo implement good stackable timers
            foreach(var entity in _filter.Value)
            {
                indexes.Clear();
                ref var invul = ref _invulPool.Value.Get(entity);
                for (int i = 0; i < invul.timers.Count; i++)
                {
                    invul.timers[i] -= Time.deltaTime;
                    if (invul.timers[i] > 0) continue;
                    indexes.Add(i);
                }
                if (indexes.Count > 0)
                {
                    foreach (var i in indexes)
                    {
                        invul.timers.RemoveAt(i);
                    }
                }
                if (invul.timers.Count < 1)
                {
                    _invulPool.Value.Del(entity);
                }
            }
        }
    }
}