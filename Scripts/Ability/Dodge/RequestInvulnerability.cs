using AbilitySystem;
using Leopotam.EcsLite;
using System.Collections.Generic;
using UnityEngine;

namespace Client {
    struct RequestInvulnerability : IAbilityComponent
    {
        public float Duration;
        [HideInInspector] public List<float> TimerStack;
        public void Init()
        {

        }

        public void Dispose(int entityCaster,int abilityEntity, EcsWorld world)
        {

        }

        // add your data here.
        public void Invoke(int entityCaster, int abilityEntity, EcsWorld world, float charge = 1)
        {
            EcsPool<RequestInvulnerability> pool = world.GetPool<RequestInvulnerability>();
            if (! pool.Has(entityCaster)) pool.Add(entityCaster).TimerStack = new List<float>();
            ref var comp = ref pool.Get(entityCaster);
            comp.TimerStack.Add(Duration);
        }
    }
    struct DelInvulnerabilityComponent : IAbilityComponent
    {
        public void Init()
        {

        }

        public void Dispose(int entityCaster,int abilityEntity, EcsWorld world)
        {
            
        }

        // add your data here.
        public void Invoke(int entityCaster, int abilityEntity, EcsWorld world, float charge = 1)
        {
            EcsPool<DelInvulnerabilityComponent> pool = world.GetPool<DelInvulnerabilityComponent>();
            if (!pool.Has(entityCaster)) pool.Add(entityCaster);
        }
    }
}