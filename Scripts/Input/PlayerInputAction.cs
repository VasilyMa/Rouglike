//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""ActionMap"",
            ""id"": ""334f2220-f704-4655-bb4c-9b288cc5aa1e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9745892d-96b2-47ee-a0a3-9c873689a12d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""a2800649-d55d-42e5-a057-a29308e3ea1d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""498a5b55-e728-4f94-908a-58b2bcf1d7b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""911d5949-e6d1-4e46-ba87-14c68e54e979"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SuperAttack"",
                    ""type"": ""Button"",
                    ""id"": ""f0ab8cf0-f4c0-49e9-8241-1e8956eb3926"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability"",
                    ""type"": ""Button"",
                    ""id"": ""b3ac62c2-d710-4c13-922a-25d1dacfc72a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UtilityAbility"",
                    ""type"": ""Button"",
                    ""id"": ""65bf725a-5189-40ab-a033-46667bce334a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""0c1a92e6-4d3b-4446-8964-6ede1629b0ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""3084aade-0f8a-4573-b859-102f733f9807"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Direction"",
                    ""id"": ""71509ae2-79ec-4934-abd5-41d013a20dcc"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""4193fe53-c9ea-4a6a-8973-3903af7ba2c9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""1d7f9bf6-327d-480b-b1f7-169944198e05"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""afec603c-edd8-4045-b9e5-9dec031cfd18"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""6e71d058-1fc3-4b7c-92a5-cefda2799ad6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dfbe9bf4-92df-4949-834d-ada2400fd3c2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b256e11d-f57d-4990-b910-864fe29d2046"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""040ada18-f971-4509-957a-b4db441a2267"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1020d0c1-f234-4e0c-894b-52498a646e9d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1eba7891-9fb9-4d6b-9a69-493aeaf702d9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23ac47bf-48ac-49ce-bf67-07bff8268702"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SuperAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91e9239a-dfe1-479b-b7e6-96f51a7e09c6"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a51b935d-adde-42fc-88ff-5f62836c3560"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UtilityAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79712871-c664-4248-ae8c-dda13d51d3f2"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08e65615-4bdd-4655-9766-f764e7e76f0b"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""NonAttackActionMap"",
            ""id"": ""31fac172-1bc5-4a60-a05a-bc75f0707a9f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ada4ae7c-0af4-47e0-bfac-8e6d9dacff58"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""e770b540-6d47-4576-8713-b0bd99d294c3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""0f55d9ef-8eed-44b2-8ab5-ec1c5d22f153"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""db1325a7-61d3-486e-860a-5e58a656de9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""d84d0843-f522-40e2-aeaf-8f51ea209e68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Direction"",
                    ""id"": ""d6658d04-a66d-42b8-8ca1-3b81009c9707"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""c1c1f0a3-b5f6-4001-98b6-1238b670ba5c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""e4990590-39c0-475d-9dfd-8ae8c8c3e81e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""af1e2acd-1d7b-440d-b654-faabe5262b74"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""d604584f-f457-4791-993d-32d7cd19c1b1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""741e36a4-f100-4376-ab56-04af22dec7b9"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""11401ef6-cb35-4b8e-8172-aaf43fc3f0b3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fe83a80b-e1d2-48e6-bac8-c2a62a081c91"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bb0176c-f842-4d21-947c-7163207d3cad"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c95a5fbc-4c0e-4931-8e8a-3610b2f18e29"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a982aa1f-bfdd-42d3-81b1-350d5dbefd2f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""NonPlayerControlMap"",
            ""id"": ""6e1b550e-55d8-4ab3-8f81-c0ec32727168"",
            ""actions"": [
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""97590a86-9965-4272-89a2-01be9730c0ef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be86c519-c666-4ba3-8e1e-1c684d99e17b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""biba"",
            ""bindingGroup"": ""biba"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ActionMap
        m_ActionMap = asset.FindActionMap("ActionMap", throwIfNotFound: true);
        m_ActionMap_Move = m_ActionMap.FindAction("Move", throwIfNotFound: true);
        m_ActionMap_Mouse = m_ActionMap.FindAction("Mouse", throwIfNotFound: true);
        m_ActionMap_Attack = m_ActionMap.FindAction("Attack", throwIfNotFound: true);
        m_ActionMap_Dash = m_ActionMap.FindAction("Dash", throwIfNotFound: true);
        m_ActionMap_SuperAttack = m_ActionMap.FindAction("SuperAttack", throwIfNotFound: true);
        m_ActionMap_Ability = m_ActionMap.FindAction("Ability", throwIfNotFound: true);
        m_ActionMap_UtilityAbility = m_ActionMap.FindAction("UtilityAbility", throwIfNotFound: true);
        m_ActionMap_ChangeWeapon = m_ActionMap.FindAction("ChangeWeapon", throwIfNotFound: true);
        m_ActionMap_Interaction = m_ActionMap.FindAction("Interaction", throwIfNotFound: true);
        // NonAttackActionMap
        m_NonAttackActionMap = asset.FindActionMap("NonAttackActionMap", throwIfNotFound: true);
        m_NonAttackActionMap_Move = m_NonAttackActionMap.FindAction("Move", throwIfNotFound: true);
        m_NonAttackActionMap_Mouse = m_NonAttackActionMap.FindAction("Mouse", throwIfNotFound: true);
        m_NonAttackActionMap_Dash = m_NonAttackActionMap.FindAction("Dash", throwIfNotFound: true);
        m_NonAttackActionMap_ChangeWeapon = m_NonAttackActionMap.FindAction("ChangeWeapon", throwIfNotFound: true);
        m_NonAttackActionMap_Interaction = m_NonAttackActionMap.FindAction("Interaction", throwIfNotFound: true);
        // NonPlayerControlMap
        m_NonPlayerControlMap = asset.FindActionMap("NonPlayerControlMap", throwIfNotFound: true);
        m_NonPlayerControlMap_Mouse = m_NonPlayerControlMap.FindAction("Mouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionMap
    private readonly InputActionMap m_ActionMap;
    private List<IActionMapActions> m_ActionMapActionsCallbackInterfaces = new List<IActionMapActions>();
    private readonly InputAction m_ActionMap_Move;
    private readonly InputAction m_ActionMap_Mouse;
    private readonly InputAction m_ActionMap_Attack;
    private readonly InputAction m_ActionMap_Dash;
    private readonly InputAction m_ActionMap_SuperAttack;
    private readonly InputAction m_ActionMap_Ability;
    private readonly InputAction m_ActionMap_UtilityAbility;
    private readonly InputAction m_ActionMap_ChangeWeapon;
    private readonly InputAction m_ActionMap_Interaction;
    public struct ActionMapActions
    {
        private @PlayerInputAction m_Wrapper;
        public ActionMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_ActionMap_Move;
        public InputAction @Mouse => m_Wrapper.m_ActionMap_Mouse;
        public InputAction @Attack => m_Wrapper.m_ActionMap_Attack;
        public InputAction @Dash => m_Wrapper.m_ActionMap_Dash;
        public InputAction @SuperAttack => m_Wrapper.m_ActionMap_SuperAttack;
        public InputAction @Ability => m_Wrapper.m_ActionMap_Ability;
        public InputAction @UtilityAbility => m_Wrapper.m_ActionMap_UtilityAbility;
        public InputAction @ChangeWeapon => m_Wrapper.m_ActionMap_ChangeWeapon;
        public InputAction @Interaction => m_Wrapper.m_ActionMap_Interaction;
        public InputActionMap Get() { return m_Wrapper.m_ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @SuperAttack.started += instance.OnSuperAttack;
            @SuperAttack.performed += instance.OnSuperAttack;
            @SuperAttack.canceled += instance.OnSuperAttack;
            @Ability.started += instance.OnAbility;
            @Ability.performed += instance.OnAbility;
            @Ability.canceled += instance.OnAbility;
            @UtilityAbility.started += instance.OnUtilityAbility;
            @UtilityAbility.performed += instance.OnUtilityAbility;
            @UtilityAbility.canceled += instance.OnUtilityAbility;
            @ChangeWeapon.started += instance.OnChangeWeapon;
            @ChangeWeapon.performed += instance.OnChangeWeapon;
            @ChangeWeapon.canceled += instance.OnChangeWeapon;
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
        }

        private void UnregisterCallbacks(IActionMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @SuperAttack.started -= instance.OnSuperAttack;
            @SuperAttack.performed -= instance.OnSuperAttack;
            @SuperAttack.canceled -= instance.OnSuperAttack;
            @Ability.started -= instance.OnAbility;
            @Ability.performed -= instance.OnAbility;
            @Ability.canceled -= instance.OnAbility;
            @UtilityAbility.started -= instance.OnUtilityAbility;
            @UtilityAbility.performed -= instance.OnUtilityAbility;
            @UtilityAbility.canceled -= instance.OnUtilityAbility;
            @ChangeWeapon.started -= instance.OnChangeWeapon;
            @ChangeWeapon.performed -= instance.OnChangeWeapon;
            @ChangeWeapon.canceled -= instance.OnChangeWeapon;
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
        }

        public void RemoveCallbacks(IActionMapActions instance)
        {
            if (m_Wrapper.m_ActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionMapActions @ActionMap => new ActionMapActions(this);

    // NonAttackActionMap
    private readonly InputActionMap m_NonAttackActionMap;
    private List<INonAttackActionMapActions> m_NonAttackActionMapActionsCallbackInterfaces = new List<INonAttackActionMapActions>();
    private readonly InputAction m_NonAttackActionMap_Move;
    private readonly InputAction m_NonAttackActionMap_Mouse;
    private readonly InputAction m_NonAttackActionMap_Dash;
    private readonly InputAction m_NonAttackActionMap_ChangeWeapon;
    private readonly InputAction m_NonAttackActionMap_Interaction;
    public struct NonAttackActionMapActions
    {
        private @PlayerInputAction m_Wrapper;
        public NonAttackActionMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_NonAttackActionMap_Move;
        public InputAction @Mouse => m_Wrapper.m_NonAttackActionMap_Mouse;
        public InputAction @Dash => m_Wrapper.m_NonAttackActionMap_Dash;
        public InputAction @ChangeWeapon => m_Wrapper.m_NonAttackActionMap_ChangeWeapon;
        public InputAction @Interaction => m_Wrapper.m_NonAttackActionMap_Interaction;
        public InputActionMap Get() { return m_Wrapper.m_NonAttackActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NonAttackActionMapActions set) { return set.Get(); }
        public void AddCallbacks(INonAttackActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_NonAttackActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NonAttackActionMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @ChangeWeapon.started += instance.OnChangeWeapon;
            @ChangeWeapon.performed += instance.OnChangeWeapon;
            @ChangeWeapon.canceled += instance.OnChangeWeapon;
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
        }

        private void UnregisterCallbacks(INonAttackActionMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @ChangeWeapon.started -= instance.OnChangeWeapon;
            @ChangeWeapon.performed -= instance.OnChangeWeapon;
            @ChangeWeapon.canceled -= instance.OnChangeWeapon;
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
        }

        public void RemoveCallbacks(INonAttackActionMapActions instance)
        {
            if (m_Wrapper.m_NonAttackActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INonAttackActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_NonAttackActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NonAttackActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NonAttackActionMapActions @NonAttackActionMap => new NonAttackActionMapActions(this);

    // NonPlayerControlMap
    private readonly InputActionMap m_NonPlayerControlMap;
    private List<INonPlayerControlMapActions> m_NonPlayerControlMapActionsCallbackInterfaces = new List<INonPlayerControlMapActions>();
    private readonly InputAction m_NonPlayerControlMap_Mouse;
    public struct NonPlayerControlMapActions
    {
        private @PlayerInputAction m_Wrapper;
        public NonPlayerControlMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse => m_Wrapper.m_NonPlayerControlMap_Mouse;
        public InputActionMap Get() { return m_Wrapper.m_NonPlayerControlMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NonPlayerControlMapActions set) { return set.Get(); }
        public void AddCallbacks(INonPlayerControlMapActions instance)
        {
            if (instance == null || m_Wrapper.m_NonPlayerControlMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NonPlayerControlMapActionsCallbackInterfaces.Add(instance);
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
        }

        private void UnregisterCallbacks(INonPlayerControlMapActions instance)
        {
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
        }

        public void RemoveCallbacks(INonPlayerControlMapActions instance)
        {
            if (m_Wrapper.m_NonPlayerControlMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INonPlayerControlMapActions instance)
        {
            foreach (var item in m_Wrapper.m_NonPlayerControlMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NonPlayerControlMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NonPlayerControlMapActions @NonPlayerControlMap => new NonPlayerControlMapActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    private int m_bibaSchemeIndex = -1;
    public InputControlScheme bibaScheme
    {
        get
        {
            if (m_bibaSchemeIndex == -1) m_bibaSchemeIndex = asset.FindControlSchemeIndex("biba");
            return asset.controlSchemes[m_bibaSchemeIndex];
        }
    }
    public interface IActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnSuperAttack(InputAction.CallbackContext context);
        void OnAbility(InputAction.CallbackContext context);
        void OnUtilityAbility(InputAction.CallbackContext context);
        void OnChangeWeapon(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
    }
    public interface INonAttackActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnChangeWeapon(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
    }
    public interface INonPlayerControlMapActions
    {
        void OnMouse(InputAction.CallbackContext context);
    }
}
