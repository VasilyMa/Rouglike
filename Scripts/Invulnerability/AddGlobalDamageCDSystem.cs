using Leopotam.EcsLite;
using Leopotam.EcsLite.Di;
using Unity;
namespace Client {
    sealed class AddGlobalDamageCDSystem : MainEcsSystem {
        readonly EcsFilterInject<Inc<TakeDamageComponent, DamageAllowedComponent>,Exc<ConditionTakeDamageComponent>> _filter;
        readonly EcsPoolInject<TakeDamageComponent> _takeDamagePool;
        readonly EcsPoolInject<GlobalDamageCDComponent> _globalDamageCDPool;
        readonly EcsWorldInject _world;
        private float _timeGlobalDamageCD;
        public override MainEcsSystem Clone()
        {
            return new AddGlobalDamageCDSystem();
        }
        public override void Init(IEcsSystems systems)
        {
            _timeGlobalDamageCD = ConfigModule.GetConfig<GameConfig>().GlobalDamageCD;
        }
        public override void Run (IEcsSystems systems) 
        {
            foreach(var entity in _filter.Value)
            {
                ref var takeDamageComp = ref _takeDamagePool.Value.Get(entity);
                if (!takeDamageComp.TargetEntity.Unpack(_world.Value, out int entityTarget)) continue;
                if (!_globalDamageCDPool.Value.Has(entityTarget)) _globalDamageCDPool.Value.Add(entityTarget);
                ref var globalDamageCDComp = ref _globalDamageCDPool.Value.Get(entityTarget);
                globalDamageCDComp.Timer = _timeGlobalDamageCD;
            }
        }
    }
}