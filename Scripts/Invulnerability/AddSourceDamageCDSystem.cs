using Leopotam.EcsLite;
using Leopotam.EcsLite.Di;
using UnityEngine;

namespace Client
{
    public class AddSourceDamageCDSystem : MainEcsSystem
    {
        readonly EcsFilterInject<Inc<TakeDamageComponent, DamageAllowedComponent>,Exc<ConditionTakeDamageComponent>> _filter;
        readonly EcsPoolInject<TakeDamageComponent> _takeDamagePool;
        readonly EcsPoolInject<SourceDamageCDComponent> _sourceDamageCDPool;
        readonly EcsWorldInject _world;
        private float SourceDamageCD = 0;
        public override MainEcsSystem Clone()
        {
            return new AddSourceDamageCDSystem();
        }

        public override void Init(IEcsSystems systems)
        {
            SourceDamageCD = ConfigModule.GetConfig<GameConfig>().SourceDamageCD;
        }

        
        public override void Run(IEcsSystems systems)
        {
            foreach(var entity in _filter.Value)
            {
                ref var takeDamageComp = ref _takeDamagePool.Value.Get(entity);
                if (!takeDamageComp.KillerEntity.Unpack(_world.Value, out int killerEntity)) continue;
                if (!takeDamageComp.TargetEntity.Unpack(_world.Value, out int targetEntity)) continue;
                if (!_sourceDamageCDPool.Value.Has(killerEntity)) _sourceDamageCDPool.Value.Add(killerEntity).listRecipientDamage = new();
                ref var sourceDamageCD = ref _sourceDamageCDPool.Value.Get(killerEntity);
                sourceDamageCD.AddNewRecipient(SourceDamageCD, takeDamageComp.TargetEntity);
            }
        }
    }
}