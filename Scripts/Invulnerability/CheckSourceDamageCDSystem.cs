using Leopotam.EcsLite;
using Leopotam.EcsLite.Di;
using UnityEngine;

namespace Client
{
    public class CheckSourceDamageCDSystem : MainEcsSystem
    {
        readonly EcsFilterInject<Inc<TakeDamageComponent, DamageAllowedComponent>> _filter;
        readonly EcsPoolInject<TakeDamageComponent> _takeDamagePool;
        readonly EcsPoolInject<SourceDamageCDComponent> _sourceDamageCDPool;
        readonly EcsPoolInject<DamageAllowedComponent> _damageAllowedPool;
        readonly EcsWorldInject _world;
        public override MainEcsSystem Clone()
        {
            return new CheckSourceDamageCDSystem();
        }
        public override void Run(IEcsSystems systems)
        {
            foreach(var entity in _filter.Value)
            {
                ref var takeDamageComp = ref _takeDamagePool.Value.Get(entity);
                if (!takeDamageComp.KillerEntity.Unpack(_world.Value, out int entityKiller)) continue;
                if (!takeDamageComp.TargetEntity.Unpack(_world.Value, out int entityTarget)) continue;
                if (!_sourceDamageCDPool.Value.Has(entityKiller)) continue;
                ref var sourceDamageComp = ref _sourceDamageCDPool.Value.Get(entityKiller);
                foreach(var recipientDamage in sourceDamageComp.listRecipientDamage)
                {
                    if (recipientDamage.entityRecipient.Id != takeDamageComp.TargetEntity.Id) continue;
                    _damageAllowedPool.Value.Del(entity);
                    break;
                }

            }
        }
    }
}